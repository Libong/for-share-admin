// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.1
// source: proto/api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordStatus int32

const (
	RecordStatus_RecordStatusUnknown RecordStatus = 0
	RecordStatus_RecordStatusOnline  RecordStatus = 1 //使用中
	RecordStatus_RecordStatusHistory RecordStatus = 2 //历史
)

// Enum value maps for RecordStatus.
var (
	RecordStatus_name = map[int32]string{
		0: "RecordStatusUnknown",
		1: "RecordStatusOnline",
		2: "RecordStatusHistory",
	}
	RecordStatus_value = map[string]int32{
		"RecordStatusUnknown": 0,
		"RecordStatusOnline":  1,
		"RecordStatusHistory": 2,
	}
)

func (x RecordStatus) Enum() *RecordStatus {
	p := new(RecordStatus)
	*p = x
	return p
}

func (x RecordStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[0].Descriptor()
}

func (RecordStatus) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[0]
}

func (x RecordStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordStatus.Descriptor instead.
func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

type AddRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsName string `protobuf:"bytes,2,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`  //物品名R称
	Status    uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                        //记录状态 1使用中 2历史
	BuyAt     int64  `protobuf:"varint,4,opt,name=buy_at,json=buyAt,proto3" json:"buy_at,omitempty"`             //购买时间
	ProduceAt int64  `protobuf:"varint,5,opt,name=produce_at,json=produceAt,proto3" json:"produce_at,omitempty"` //生产日期
	OverdueAt int64  `protobuf:"varint,6,opt,name=overdue_at,json=overdueAt,proto3" json:"overdue_at,omitempty"` //过期时间
	StarLevel uint32 `protobuf:"varint,7,opt,name=star_level,json=starLevel,proto3" json:"star_level,omitempty"` //星级
	Picture   string `protobuf:"bytes,8,opt,name=picture,proto3" json:"picture,omitempty"`                       //图片
	Comment   string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`                       //评价
}

func (x *AddRecordReq) Reset() {
	*x = AddRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecordReq) ProtoMessage() {}

func (x *AddRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecordReq.ProtoReflect.Descriptor instead.
func (*AddRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

func (x *AddRecordReq) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *AddRecordReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddRecordReq) GetBuyAt() int64 {
	if x != nil {
		return x.BuyAt
	}
	return 0
}

func (x *AddRecordReq) GetProduceAt() int64 {
	if x != nil {
		return x.ProduceAt
	}
	return 0
}

func (x *AddRecordReq) GetOverdueAt() int64 {
	if x != nil {
		return x.OverdueAt
	}
	return 0
}

func (x *AddRecordReq) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *AddRecordReq) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *AddRecordReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type AddRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddRecordResp) Reset() {
	*x = AddRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecordResp) ProtoMessage() {}

func (x *AddRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecordResp.ProtoReflect.Descriptor instead.
func (*AddRecordResp) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

func (x *AddRecordResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId   string   `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`         //记录编号
	GoodsName  string   `protobuf:"bytes,2,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`      //物品名称
	Status     uint32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                            //记录状态 1使用中 2历史
	BuyAt      int64    `protobuf:"varint,4,opt,name=buy_at,json=buyAt,proto3" json:"buy_at,omitempty"`                 //购买时间
	ProduceAt  int64    `protobuf:"varint,5,opt,name=produce_at,json=produceAt,proto3" json:"produce_at,omitempty"`     //生产日期
	OverdueAt  int64    `protobuf:"varint,6,opt,name=overdue_at,json=overdueAt,proto3" json:"overdue_at,omitempty"`     //过期时间
	StarLevel  uint32   `protobuf:"varint,7,opt,name=star_level,json=starLevel,proto3" json:"star_level,omitempty"`     //星级
	Picture    string   `protobuf:"bytes,8,opt,name=picture,proto3" json:"picture,omitempty"`                           //图片
	Comment    string   `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`                           //评价
	HandleZero bool     `protobuf:"varint,90,opt,name=handle_zero,json=handleZero,proto3" json:"handle_zero,omitempty"` //是否处理零值 需要在dao层进行判断 为true时只能传可以被设置为零值的字段
	ZeroFields []string `protobuf:"bytes,91,rep,name=zero_fields,json=zeroFields,proto3" json:"zero_fields,omitempty"`  //要处理的字段json
}

func (x *UpdateRecordReq) Reset() {
	*x = UpdateRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordReq) ProtoMessage() {}

func (x *UpdateRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRecordReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UpdateRecordReq) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *UpdateRecordReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateRecordReq) GetBuyAt() int64 {
	if x != nil {
		return x.BuyAt
	}
	return 0
}

func (x *UpdateRecordReq) GetProduceAt() int64 {
	if x != nil {
		return x.ProduceAt
	}
	return 0
}

func (x *UpdateRecordReq) GetOverdueAt() int64 {
	if x != nil {
		return x.OverdueAt
	}
	return 0
}

func (x *UpdateRecordReq) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *UpdateRecordReq) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *UpdateRecordReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateRecordReq) GetHandleZero() bool {
	if x != nil {
		return x.HandleZero
	}
	return false
}

func (x *UpdateRecordReq) GetZeroFields() []string {
	if x != nil {
		return x.ZeroFields
	}
	return nil
}

type DeleteRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRecordReq) Reset() {
	*x = DeleteRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordReq) ProtoMessage() {}

func (x *DeleteRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordReq.ProtoReflect.Descriptor instead.
func (*DeleteRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRecordReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecordByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RecordByIDReq) Reset() {
	*x = RecordByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordByIDReq) ProtoMessage() {}

func (x *RecordByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordByIDReq.ProtoReflect.Descriptor instead.
func (*RecordByIDReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{4}
}

func (x *RecordByIDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecordByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *RecordByIDResp) Reset() {
	*x = RecordByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordByIDResp) ProtoMessage() {}

func (x *RecordByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordByIDResp.ProtoReflect.Descriptor instead.
func (*RecordByIDResp) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{5}
}

func (x *RecordByIDResp) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId    string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`            //记录编号
	GoodsName   string `protobuf:"bytes,2,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`         //物品名称
	Status      uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                               //记录状态 1使用中 2历史
	BuyAt       int64  `protobuf:"varint,4,opt,name=buy_at,json=buyAt,proto3" json:"buy_at,omitempty"`                    //购买时间
	ProduceAt   int64  `protobuf:"varint,5,opt,name=produce_at,json=produceAt,proto3" json:"produce_at,omitempty"`        //生产日期
	OverdueAt   int64  `protobuf:"varint,6,opt,name=overdue_at,json=overdueAt,proto3" json:"overdue_at,omitempty"`        //过期时间
	StarLevel   uint32 `protobuf:"varint,7,opt,name=star_level,json=starLevel,proto3" json:"star_level,omitempty"`        //星级
	Picture     string `protobuf:"bytes,8,opt,name=picture,proto3" json:"picture,omitempty"`                              //图片
	Comment     string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`                              //评价
	EstablishAt int64  `protobuf:"varint,10,opt,name=establish_at,json=establishAt,proto3" json:"establish_at,omitempty"` //创建时间
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{6}
}

func (x *Record) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *Record) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *Record) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Record) GetBuyAt() int64 {
	if x != nil {
		return x.BuyAt
	}
	return 0
}

func (x *Record) GetProduceAt() int64 {
	if x != nil {
		return x.ProduceAt
	}
	return 0
}

func (x *Record) GetOverdueAt() int64 {
	if x != nil {
		return x.OverdueAt
	}
	return 0
}

func (x *Record) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *Record) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *Record) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Record) GetEstablishAt() int64 {
	if x != nil {
		return x.EstablishAt
	}
	return 0
}

type RecordCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuzzyGoodsName   string   `protobuf:"bytes,1,opt,name=fuzzy_goods_name,json=fuzzyGoodsName,proto3" json:"fuzzy_goods_name,omitempty"` //物品名称
	RecordIds        []string `protobuf:"bytes,2,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	Status           uint32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                                //记录状态 1使用中 2历史
	BuyStartAt       int64    `protobuf:"varint,4,opt,name=buy_start_at,json=buyStartAt,proto3" json:"buy_start_at,omitempty"`                    //购买时间
	BuyEndAt         int64    `protobuf:"varint,5,opt,name=buy_end_at,json=buyEndAt,proto3" json:"buy_end_at,omitempty"`                          //购买时间
	ProduceStartAt   int64    `protobuf:"varint,6,opt,name=produce_start_at,json=produceStartAt,proto3" json:"produce_start_at,omitempty"`        //生产日期
	ProduceEndAt     int64    `protobuf:"varint,7,opt,name=produce_end_at,json=produceEndAt,proto3" json:"produce_end_at,omitempty"`              //生产日期
	OverdueStartAt   int64    `protobuf:"varint,8,opt,name=overdue_start_at,json=overdueStartAt,proto3" json:"overdue_start_at,omitempty"`        //过期时间
	OverdueEndAt     int64    `protobuf:"varint,9,opt,name=overdue_end_at,json=overdueEndAt,proto3" json:"overdue_end_at,omitempty"`              //过期时间
	StarLevels       []uint32 `protobuf:"varint,10,rep,packed,name=star_levels,json=starLevels,proto3" json:"star_levels,omitempty"`              //星级
	EstablishStartAt int64    `protobuf:"varint,11,opt,name=establish_start_at,json=establishStartAt,proto3" json:"establish_start_at,omitempty"` //创建时间
	EstablishEndAt   int64    `protobuf:"varint,12,opt,name=establish_end_at,json=establishEndAt,proto3" json:"establish_end_at,omitempty"`       //创建时间
}

func (x *RecordCondition) Reset() {
	*x = RecordCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCondition) ProtoMessage() {}

func (x *RecordCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCondition.ProtoReflect.Descriptor instead.
func (*RecordCondition) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{7}
}

func (x *RecordCondition) GetFuzzyGoodsName() string {
	if x != nil {
		return x.FuzzyGoodsName
	}
	return ""
}

func (x *RecordCondition) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *RecordCondition) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RecordCondition) GetBuyStartAt() int64 {
	if x != nil {
		return x.BuyStartAt
	}
	return 0
}

func (x *RecordCondition) GetBuyEndAt() int64 {
	if x != nil {
		return x.BuyEndAt
	}
	return 0
}

func (x *RecordCondition) GetProduceStartAt() int64 {
	if x != nil {
		return x.ProduceStartAt
	}
	return 0
}

func (x *RecordCondition) GetProduceEndAt() int64 {
	if x != nil {
		return x.ProduceEndAt
	}
	return 0
}

func (x *RecordCondition) GetOverdueStartAt() int64 {
	if x != nil {
		return x.OverdueStartAt
	}
	return 0
}

func (x *RecordCondition) GetOverdueEndAt() int64 {
	if x != nil {
		return x.OverdueEndAt
	}
	return 0
}

func (x *RecordCondition) GetStarLevels() []uint32 {
	if x != nil {
		return x.StarLevels
	}
	return nil
}

func (x *RecordCondition) GetEstablishStartAt() int64 {
	if x != nil {
		return x.EstablishStartAt
	}
	return 0
}

func (x *RecordCondition) GetEstablishEndAt() int64 {
	if x != nil {
		return x.EstablishEndAt
	}
	return 0
}

type SearchRecordsPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *RecordCondition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	PageNum   uint32           `protobuf:"varint,100,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize  uint32           `protobuf:"varint,101,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *SearchRecordsPageReq) Reset() {
	*x = SearchRecordsPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecordsPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecordsPageReq) ProtoMessage() {}

func (x *SearchRecordsPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecordsPageReq.ProtoReflect.Descriptor instead.
func (*SearchRecordsPageReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{8}
}

func (x *SearchRecordsPageReq) GetCondition() *RecordCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SearchRecordsPageReq) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SearchRecordsPageReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SearchRecordsPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Record `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchRecordsPageResp) Reset() {
	*x = SearchRecordsPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecordsPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecordsPageResp) ProtoMessage() {}

func (x *SearchRecordsPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecordsPageResp.ProtoReflect.Descriptor instead.
func (*SearchRecordsPageResp) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{9}
}

func (x *SearchRecordsPageResp) GetList() []*Record {
	if x != nil {
		return x.List
	}
	return nil
}

type CountRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *RecordCondition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *CountRecordReq) Reset() {
	*x = CountRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRecordReq) ProtoMessage() {}

func (x *CountRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRecordReq.ProtoReflect.Descriptor instead.
func (*CountRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{10}
}

func (x *CountRecordReq) GetCondition() *RecordCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type CountRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CountRecordResp) Reset() {
	*x = CountRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRecordResp) ProtoMessage() {}

func (x *CountRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRecordResp.ProtoReflect.Descriptor instead.
func (*CountRecordResp) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11}
}

func (x *CountRecordResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// -----------------记录分类-----------------
type RecordCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId   string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *RecordCategory) Reset() {
	*x = RecordCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCategory) ProtoMessage() {}

func (x *RecordCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCategory.ProtoReflect.Descriptor instead.
func (*RecordCategory) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{12}
}

func (x *RecordCategory) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *RecordCategory) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type BatchAddRecordCategoriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RecordCategory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BatchAddRecordCategoriesReq) Reset() {
	*x = BatchAddRecordCategoriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddRecordCategoriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddRecordCategoriesReq) ProtoMessage() {}

func (x *BatchAddRecordCategoriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddRecordCategoriesReq.ProtoReflect.Descriptor instead.
func (*BatchAddRecordCategoriesReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{13}
}

func (x *BatchAddRecordCategoriesReq) GetList() []*RecordCategory {
	if x != nil {
		return x.List
	}
	return nil
}

type BatchDeleteRecordCategoriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordIds   []string `protobuf:"bytes,1,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	CategoryIds []string `protobuf:"bytes,2,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *BatchDeleteRecordCategoriesReq) Reset() {
	*x = BatchDeleteRecordCategoriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRecordCategoriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRecordCategoriesReq) ProtoMessage() {}

func (x *BatchDeleteRecordCategoriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRecordCategoriesReq.ProtoReflect.Descriptor instead.
func (*BatchDeleteRecordCategoriesReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{14}
}

func (x *BatchDeleteRecordCategoriesReq) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *BatchDeleteRecordCategoriesReq) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type SearchRecordCategoriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordIds   []string `protobuf:"bytes,1,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	CategoryIds []string `protobuf:"bytes,2,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *SearchRecordCategoriesReq) Reset() {
	*x = SearchRecordCategoriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecordCategoriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecordCategoriesReq) ProtoMessage() {}

func (x *SearchRecordCategoriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecordCategoriesReq.ProtoReflect.Descriptor instead.
func (*SearchRecordCategoriesReq) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{15}
}

func (x *SearchRecordCategoriesReq) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *SearchRecordCategoriesReq) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type SearchRecordCategoriesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RecordCategory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchRecordCategoriesResp) Reset() {
	*x = SearchRecordCategoriesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecordCategoriesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecordCategoriesResp) ProtoMessage() {}

func (x *SearchRecordCategoriesResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecordCategoriesResp.ProtoReflect.Descriptor instead.
func (*SearchRecordCategoriesResp) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{16}
}

func (x *SearchRecordCategoriesResp) GetList() []*RecordCategory {
	if x != nil {
		return x.List
	}
	return nil
}

var File_proto_api_proto protoreflect.FileDescriptor

var file_proto_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x75,
	0x79, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x75, 0x79, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x75, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x75, 0x79,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5a, 0x65, 0x72, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x7a, 0x65, 0x72, 0x6f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0xa7, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x62, 0x75, 0x79, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75,
	0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x0f, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72,
	0x64, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67,
	0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e,
	0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x65, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x46, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x5d, 0x0a,
	0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x1a,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c,
	0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x2a, 0x58, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x32, 0xcf, 0x08, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e,
	0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66,
	0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66,
	0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69,
	0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67,
	0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69,
	0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x18, 0x62, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e,
	0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x6f, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x08,
	0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_api_proto_rawDescOnce sync.Once
	file_proto_api_proto_rawDescData = file_proto_api_proto_rawDesc
)

func file_proto_api_proto_rawDescGZIP() []byte {
	file_proto_api_proto_rawDescOnce.Do(func() {
		file_proto_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_proto_rawDescData)
	})
	return file_proto_api_proto_rawDescData
}

var file_proto_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_api_proto_goTypes = []interface{}{
	(RecordStatus)(0),                      // 0: com.libong.forShare.service.record.RecordStatus
	(*AddRecordReq)(nil),                   // 1: com.libong.forShare.service.record.AddRecordReq
	(*AddRecordResp)(nil),                  // 2: com.libong.forShare.service.record.AddRecordResp
	(*UpdateRecordReq)(nil),                // 3: com.libong.forShare.service.record.UpdateRecordReq
	(*DeleteRecordReq)(nil),                // 4: com.libong.forShare.service.record.DeleteRecordReq
	(*RecordByIDReq)(nil),                  // 5: com.libong.forShare.service.record.RecordByIDReq
	(*RecordByIDResp)(nil),                 // 6: com.libong.forShare.service.record.RecordByIDResp
	(*Record)(nil),                         // 7: com.libong.forShare.service.record.Record
	(*RecordCondition)(nil),                // 8: com.libong.forShare.service.record.RecordCondition
	(*SearchRecordsPageReq)(nil),           // 9: com.libong.forShare.service.record.SearchRecordsPageReq
	(*SearchRecordsPageResp)(nil),          // 10: com.libong.forShare.service.record.SearchRecordsPageResp
	(*CountRecordReq)(nil),                 // 11: com.libong.forShare.service.record.CountRecordReq
	(*CountRecordResp)(nil),                // 12: com.libong.forShare.service.record.CountRecordResp
	(*RecordCategory)(nil),                 // 13: com.libong.forShare.service.record.RecordCategory
	(*BatchAddRecordCategoriesReq)(nil),    // 14: com.libong.forShare.service.record.BatchAddRecordCategoriesReq
	(*BatchDeleteRecordCategoriesReq)(nil), // 15: com.libong.forShare.service.record.BatchDeleteRecordCategoriesReq
	(*SearchRecordCategoriesReq)(nil),      // 16: com.libong.forShare.service.record.SearchRecordCategoriesReq
	(*SearchRecordCategoriesResp)(nil),     // 17: com.libong.forShare.service.record.SearchRecordCategoriesResp
	(*emptypb.Empty)(nil),                  // 18: google.protobuf.Empty
}
var file_proto_api_proto_depIdxs = []int32{
	7,  // 0: com.libong.forShare.service.record.RecordByIDResp.record:type_name -> com.libong.forShare.service.record.Record
	8,  // 1: com.libong.forShare.service.record.SearchRecordsPageReq.condition:type_name -> com.libong.forShare.service.record.RecordCondition
	7,  // 2: com.libong.forShare.service.record.SearchRecordsPageResp.list:type_name -> com.libong.forShare.service.record.Record
	8,  // 3: com.libong.forShare.service.record.CountRecordReq.condition:type_name -> com.libong.forShare.service.record.RecordCondition
	13, // 4: com.libong.forShare.service.record.BatchAddRecordCategoriesReq.list:type_name -> com.libong.forShare.service.record.RecordCategory
	13, // 5: com.libong.forShare.service.record.SearchRecordCategoriesResp.list:type_name -> com.libong.forShare.service.record.RecordCategory
	1,  // 6: com.libong.forShare.service.record.RecordService.addRecord:input_type -> com.libong.forShare.service.record.AddRecordReq
	3,  // 7: com.libong.forShare.service.record.RecordService.updateRecord:input_type -> com.libong.forShare.service.record.UpdateRecordReq
	4,  // 8: com.libong.forShare.service.record.RecordService.deleteRecord:input_type -> com.libong.forShare.service.record.DeleteRecordReq
	5,  // 9: com.libong.forShare.service.record.RecordService.recordByID:input_type -> com.libong.forShare.service.record.RecordByIDReq
	9,  // 10: com.libong.forShare.service.record.RecordService.searchRecordsPage:input_type -> com.libong.forShare.service.record.SearchRecordsPageReq
	11, // 11: com.libong.forShare.service.record.RecordService.countRecord:input_type -> com.libong.forShare.service.record.CountRecordReq
	14, // 12: com.libong.forShare.service.record.RecordService.batchAddRecordCategories:input_type -> com.libong.forShare.service.record.BatchAddRecordCategoriesReq
	15, // 13: com.libong.forShare.service.record.RecordService.batchDeleteRecordCategories:input_type -> com.libong.forShare.service.record.BatchDeleteRecordCategoriesReq
	16, // 14: com.libong.forShare.service.record.RecordService.searchRecordCategories:input_type -> com.libong.forShare.service.record.SearchRecordCategoriesReq
	2,  // 15: com.libong.forShare.service.record.RecordService.addRecord:output_type -> com.libong.forShare.service.record.AddRecordResp
	18, // 16: com.libong.forShare.service.record.RecordService.updateRecord:output_type -> google.protobuf.Empty
	18, // 17: com.libong.forShare.service.record.RecordService.deleteRecord:output_type -> google.protobuf.Empty
	6,  // 18: com.libong.forShare.service.record.RecordService.recordByID:output_type -> com.libong.forShare.service.record.RecordByIDResp
	10, // 19: com.libong.forShare.service.record.RecordService.searchRecordsPage:output_type -> com.libong.forShare.service.record.SearchRecordsPageResp
	12, // 20: com.libong.forShare.service.record.RecordService.countRecord:output_type -> com.libong.forShare.service.record.CountRecordResp
	18, // 21: com.libong.forShare.service.record.RecordService.batchAddRecordCategories:output_type -> google.protobuf.Empty
	18, // 22: com.libong.forShare.service.record.RecordService.batchDeleteRecordCategories:output_type -> google.protobuf.Empty
	17, // 23: com.libong.forShare.service.record.RecordService.searchRecordCategories:output_type -> com.libong.forShare.service.record.SearchRecordCategoriesResp
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_proto_api_proto_init() }
func file_proto_api_proto_init() {
	if File_proto_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecordsPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecordsPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddRecordCategoriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteRecordCategoriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecordCategoriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecordCategoriesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_api_proto_goTypes,
		DependencyIndexes: file_proto_api_proto_depIdxs,
		EnumInfos:         file_proto_api_proto_enumTypes,
		MessageInfos:      file_proto_api_proto_msgTypes,
	}.Build()
	File_proto_api_proto = out.File
	file_proto_api_proto_rawDesc = nil
	file_proto_api_proto_goTypes = nil
	file_proto_api_proto_depIdxs = nil
}
